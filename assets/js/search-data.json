{
  
    
        "post0": {
            "title": "Forecast_LSTM",
            "content": "Time-Series Prediction - LSTM . _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= lstm_10 (LSTM) (None, 200) 161600 _________________________________________________________________ dropout_10 (Dropout) (None, 200) 0 _________________________________________________________________ dense_10 (Dense) (None, 1) 201 ================================================================= Total params: 161,801 Trainable params: 161,801 Non-trainable params: 0 _________________________________________________________________ . Loss . Test . No handles with labels found to put in legend. . rmse: [654.94856416] . Confirmed Prediction . Last_Update . 2020-04-01 00:00:00 1054 | 1650.927354 | . 2020-04-02 00:00:00 1133 | 1771.818382 | . 2020-04-03 00:00:00 1265 | 1905.527952 | . 2020-04-04 00:00:00 1451 | 2038.174493 | . 2020-04-05 00:00:00 1451 | 2151.895173 | . 2020-04-06 22:11:18 1554 | 2304.353619 | . Proyecci&#243;n diaria . No handles with labels found to put in legend. . Prediction . 2020-04-07 22:11:18 1677.732435 | . 2020-04-08 22:11:18 1792.521696 | . 2020-04-09 22:11:18 1917.180347 | . 2020-04-10 22:11:18 2040.406445 | . 2020-04-11 22:11:18 2146.625020 | . 2020-04-12 22:11:18 2283.759532 | .",
            "url": "/fastpages/2020/04/07/Forecast_LSTM.html",
            "relUrl": "/2020/04/07/Forecast_LSTM.html",
            "date": " • Apr 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Home",
            "content": "Propagaci&#243;n diaria del COVID19 por pa&#237;s . Evolución diaria a nivel mundial . Tamaño:Casos Confirmados- Color: Muertes Confirmadas | . . . fuente : https://systems.jhu.edu/ . Fecha actualización: 2020-04-08 .",
            "url": "/fastpages/2020/03/31/home.html",
            "relUrl": "/2020/03/31/home.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19",
            "content": "fuente : https://www.ecdc.europa.eu/ . Fecha actualización: 31/12/2019 . df.dtypes . dateRep datetime64[ns] day int64 month int64 year int64 cases int64 deaths int64 countriesAndTerritories object geoId object countryterritoryCode object popData2018 float64 continentExp object min_date datetime64[ns] days float64 dtype: object . #collapse-hide df.head(10) . . pais dateRep day month year cases deaths geoId countryterritoryCode popData2018 continentExp min_date days cum_cases cum_deaths date_int max_cases . 13 China | 2019-12-31 | 31.0 | 12.0 | 2019.0 | 27.0 | 0.0 | CN | CHN | 1.392730e+09 | Asia | 2019-12-31 | 0.0 | 27.0 | 0.0 | 20191231.0 | 84038.0 | . 80 China | 2020-01-01 | 1.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | Asia | 2019-12-31 | 1.0 | 27.0 | 0.0 | 20200101.0 | 84038.0 | . 197 United_Arab_Emirates | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AE | ARE | 9.630959e+06 | Asia | 2020-01-03 | 29.0 | 611.0 | 8.0 | 20200102.0 | 21831.0 | . 134 Afghanistan | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AF | AFG | 3.717239e+07 | Asia | 2020-01-04 | 28.0 | 247.0 | 4.0 | 20200102.0 | 6402.0 | . 136 Armenia | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AM | ARM | 2.951776e+06 | Europe | 2020-01-03 | 29.0 | 185.0 | 2.0 | 20200102.0 | 4044.0 | . 138 Austria | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AT | AUT | 8.847037e+06 | Europe | 2020-01-03 | 29.0 | 627.0 | 24.0 | 20200102.0 | 16068.0 | . 137 Australia | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AU | AUS | 2.499237e+07 | Oceania | 2020-01-02 | 30.0 | 176.0 | 4.0 | 20200102.0 | 7019.0 | . 139 Azerbaijan | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | AZ | AZE | 9.942334e+06 | Europe | 2020-01-04 | 28.0 | 63.0 | 2.0 | 20200102.0 | 2980.0 | . 142 Belgium | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | BE | BEL | 1.142207e+07 | Europe | 2020-01-04 | 28.0 | 1536.0 | 285.0 | 20200102.0 | 54644.0 | . 140 Bahrain | 2020-02-01 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | BH | BHR | 1.569439e+06 | Asia | 2020-01-03 | 29.0 | 174.0 | 0.0 | 20200102.0 | 6583.0 | . Casos acumulados por pa&#237;s . Evoluci&#243;n Diaria . #collapse-hide source = df[df[&#39;max_cases&#39;] &gt;= 10000] label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=35, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=35, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de casos detectados por d&#237;a del primer caso detectado en cada pa&#237;s . #collapse-hide source = df[df[&#39;max_cases&#39;] &gt;= 10000] label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=40, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Escala logaritmica de casos y casos acumulados por pais . #collapse-hide source = df[df[&#39;cases&#39;] &gt; 0] source = source[source[&#39;max_cases&#39;] &gt;= 30000] label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line(point=True).encode( alt.X(&#39;cum_cases:Q&#39;, axis=alt.Axis(grid=False), scale=alt.Scale(type=&#39;log&#39;)), alt.Y(&#39;cases:Q&#39;, axis=alt.Axis(grid=False), scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;cum_cases:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=40, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de desesos detectados por d&#237;a del primer caso detectado en cada pa&#237;s . #collapse-hide source = df#.where(df[&#39;max_cases&#39;] &gt;= 1000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de desesos detectados por fecha en cada pa&#237;s . #collapse-hide source = df#.where(df[&#39;max_cases&#39;] &gt;= 1000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;right&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;right&#39;, dx=5, dy=-15, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;right&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;right&#39;, dx=5, dy=-15).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ).interactive() . . Casos acumulados y desesos acumulados del &#250;ltimo d&#237;a . #collapse-hide date = data[&#39;dateRep&#39;].max() source = df.where(df[&#39;dateRep&#39;] &gt;= date) source = source.where(source[&#39;max_cases&#39;] &gt;= 1000) alt.Chart(source).mark_circle(size=100).encode( alt.X(&#39;cum_cases:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), color=&#39;pais&#39;, tooltip=[&#39;pais:N&#39;, &#39;cum_deaths:Q&#39;, &#39;cum_cases:Q&#39;] ).properties( width=700, height=400 ).interactive() . . Relacion de casos detectados y desesos por pais . Argentina . Curva de casos acumulados por d&#237;a . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [13]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:Q&#39;) alt.layer( base, vline,# base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . #collapse-hide source = df.query(&#39;pais in [&quot;Argentina&quot;, &quot;Chile&quot;, &quot;Brazil&quot;, &quot;Spain&quot;]&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [13]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:Q&#39;) alt.layer( base, vline,# base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [13]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:Q&#39;) alt.layer( base, vline, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . Casos detectados por d&#237;a . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cases:Q&#39;), alt.Color(&#39;pais:N&#39;), tooltip=[&#39;pais:N&#39;, &#39;dateRep:T&#39;, &#39;cum_cases:Q&#39;] ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [&#39;2020-03-17&#39;]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:T&#39;) alt.layer( base, vline, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cases:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . #collapse-hide source = df[df[&#39;max_cases&#39;] &gt;= 50000] source = source[source[&#39;cases&#39;] &gt; 0] label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . #collapse-hide source = df[df[&#39;max_cases&#39;] &gt;= 50000] source = source[source[&#39;deaths&#39;] &gt; 0] label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;deaths:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . .",
            "url": "/fastpages/2020/03/31/covid19.html",
            "relUrl": "/2020/03/31/covid19.html",
            "date": " • Mar 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}