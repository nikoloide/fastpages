{
  
    
        "post0": {
            "title": "Title",
            "content": "COVID-19 . Home . toc: false | badges: true | comments: false | author: Nicolas Santilli | description: Gráficos de análisis de Covid19 | image: https://cdn4.iconfinder.com/data/icons/business-graphics/512/trend_report-512.png | home: true | hide: true | . df_day = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) data = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv&quot;) df_geo = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) . data = data[[&#39;Country_Region&#39;, &#39;Last_Update&#39;, &#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]] data[&#39;Last_Update&#39;] = pd.to_datetime(data[&#39;Last_Update&#39;]).dt.date data.dtypes . Country_Region object Last_Update object Confirmed int64 Deaths int64 Recovered float64 Active float64 dtype: object . df_day = df_day[[&#39;Country_Region&#39;, &#39;Last_Update&#39;, &#39;Confirmed&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;, &#39;Active&#39;]] df_day.dtypes . Country_Region object Last_Update object Confirmed int64 Deaths int64 Recovered int64 Active int64 dtype: object . df_day[&#39;Last_Update&#39;] = pd.to_datetime(df_day[&#39;Last_Update&#39;]).dt.date . df_day.head() . Country_Region Last_Update Confirmed Deaths Recovered Active . 0 Australia | 2020-04-03 | 5330 | 28 | 649 | 4653 | . 1 Austria | 2020-04-03 | 11524 | 168 | 2022 | 9334 | . 2 Canada | 2020-04-03 | 12437 | 179 | 2175 | 0 | . 3 China | 2020-04-03 | 82511 | 3326 | 76760 | 2425 | . 4 Denmark | 2020-04-03 | 3946 | 139 | 1287 | 2520 | . df = pd.concat([data, df_day]) df . Country_Region Last_Update Confirmed Deaths Recovered Active . 0 Afghanistan | 2020-01-22 | 0 | 0 | NaN | NaN | . 1 Afghanistan | 2020-01-23 | 0 | 0 | NaN | NaN | . 2 Afghanistan | 2020-01-24 | 0 | 0 | NaN | NaN | . 3 Afghanistan | 2020-01-25 | 0 | 0 | NaN | NaN | . 4 Afghanistan | 2020-01-26 | 0 | 0 | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | . 176 Venezuela | 2020-04-03 | 153 | 7 | 52.0 | 94.0 | . 177 Vietnam | 2020-04-03 | 237 | 0 | 85.0 | 152.0 | . 178 West Bank and Gaza | 2020-04-03 | 194 | 1 | 21.0 | 172.0 | . 179 Zambia | 2020-04-03 | 39 | 1 | 2.0 | 36.0 | . 180 Zimbabwe | 2020-04-03 | 9 | 1 | 0.0 | 8.0 | . 13213 rows × 6 columns . df_geo = df_geo[[&#39;Country_Region&#39;, &#39;Lat&#39;, &#39;Long_&#39;]] . df_all = df.merge(df_geo, on=&#39;Country_Region&#39;, how=&#39;left&#39;) df_all.head() . Country_Region Last_Update Confirmed Deaths Recovered Active Lat Long_ . 0 Afghanistan | 2020-01-22 | 0 | 0 | NaN | NaN | 33.93911 | 67.709953 | . 1 Afghanistan | 2020-01-23 | 0 | 0 | NaN | NaN | 33.93911 | 67.709953 | . 2 Afghanistan | 2020-01-24 | 0 | 0 | NaN | NaN | 33.93911 | 67.709953 | . 3 Afghanistan | 2020-01-25 | 0 | 0 | NaN | NaN | 33.93911 | 67.709953 | . 4 Afghanistan | 2020-01-26 | 0 | 0 | NaN | NaN | 33.93911 | 67.709953 | . import plotly.express as px df_data = df_all.groupby([&#39;Last_Update&#39;, &#39;Country_Region&#39;])[&#39;Confirmed&#39;, &#39;Deaths&#39;].max().reset_index() df_data[&quot;Last_Update&quot;] = pd.to_datetime( df_data[&quot;Last_Update&quot;]).dt.strftime(&#39;%m/%d/%Y&#39;) fig = px.scatter_geo(df_data, locations=&quot;Country_Region&quot;, locationmode=&#39;country names&#39;, color=np.power(df_data[&quot;Confirmed&quot;],0.3)-2 , size= np.power(df_data[&quot;Confirmed&quot;]+1,0.3)-1, hover_name=&quot;Country_Region&quot;, hover_data=[&quot;Confirmed&quot;], range_color= [0, max(np.power(df_data[&quot;Confirmed&quot;],0.3))], projection=&quot;natural earth&quot;, animation_frame=&quot;Last_Update&quot;, color_continuous_scale=px.colors.sequential.Plasma, title=&#39;COVID-19: Progression of spread&#39; ) fig.update_coloraxes(colorscale=&quot;hot&quot;) fig.update(layout_coloraxis_showscale=False) fig.show() . C: Users nisantil AppData Local Continuum anaconda3 lib site-packages ipykernel_launcher.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead. .",
            "url": "/fastpages/2020/03/31/home.html",
            "relUrl": "/2020/03/31/home.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19",
            "content": "fuente : https://www.ecdc.europa.eu/ . Fecha actualización: 2020-04-03 00:00:00 . #collapse-hide df.head(10) . . pais dateRep day month year cases deaths geoId countryterritoryCode popData2018 min_date days cum_cases cum_deaths date_int max_cases . 13 China | 2019-12-31 | 31.0 | 12.0 | 2019.0 | 27.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 0.0 | 27.0 | 0.0 | 20191231.0 | 82465.0 | . 80 China | 2020-01-01 | 1.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 1.0 | 27.0 | 0.0 | 20200101.0 | 82465.0 | . 147 China | 2020-01-02 | 2.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 2.0 | 27.0 | 0.0 | 20200102.0 | 82465.0 | . 214 China | 2020-01-03 | 3.0 | 1.0 | 2020.0 | 17.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 3.0 | 44.0 | 0.0 | 20200103.0 | 82465.0 | . 281 China | 2020-01-04 | 4.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 4.0 | 44.0 | 0.0 | 20200104.0 | 82465.0 | . 348 China | 2020-01-05 | 5.0 | 1.0 | 2020.0 | 15.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 5.0 | 59.0 | 0.0 | 20200105.0 | 82465.0 | . 415 China | 2020-01-06 | 6.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 6.0 | 59.0 | 0.0 | 20200106.0 | 82465.0 | . 482 China | 2020-01-07 | 7.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 7.0 | 59.0 | 0.0 | 20200107.0 | 82465.0 | . 549 China | 2020-01-08 | 8.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 8.0 | 59.0 | 0.0 | 20200108.0 | 82465.0 | . 616 China | 2020-01-09 | 9.0 | 1.0 | 2020.0 | 0.0 | 0.0 | CN | CHN | 1.392730e+09 | 2019-12-31 | 9.0 | 59.0 | 0.0 | 20200109.0 | 82465.0 | . Casos acumulados por pa&#237;s . Evoluci&#243;n Diaria . #collapse-hide source = df.where(df[&#39;max_cases&#39;] &gt;= 10000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=35, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=35, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de casos detectados por d&#237;a del primer caso detectado en cada pa&#237;s . #collapse-hide source = df.where(df[&#39;max_cases&#39;] &gt;= 1000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=40, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Escala logaritmica de casos y casos acumulados por pais . #collapse-hide source = df.where(df[&#39;cases&#39;] &gt; 0) source = source.where(df[&#39;max_cases&#39;] &gt;= 30000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line(point=True).encode( alt.X(&#39;cum_cases:Q&#39;, axis=alt.Axis(grid=False), scale=alt.Scale(type=&#39;log&#39;)), alt.Y(&#39;cases:Q&#39;, axis=alt.Axis(grid=False), scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;cum_cases:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=40, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de desesos detectados por d&#237;a del primer caso detectado en cada pa&#237;s . #collapse-hide source = df#.where(df[&#39;max_cases&#39;] &gt;= 1000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;left&#39;, dx=37, dy=-5).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) . . Evoluci&#243;n de desesos detectados por fecha en cada pa&#237;s . #collapse-hide source = df#.where(df[&#39;max_cases&#39;] &gt;= 1000) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) alt.data_transformers.enable(&#39;default&#39;, max_rows=None) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;right&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;right&#39;, dx=5, dy=-15, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;pais:N&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;right&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), base.mark_text(align=&#39;right&#39;, dx=5, dy=-15).encode( text=&#39;pais:N&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ).interactive() . . Casos acumulados y desesos acumulados del &#250;ltimo d&#237;a . #collapse-hide date = data[&#39;dateRep&#39;].max() source = df.where(df[&#39;dateRep&#39;] &gt;= date) source = source.where(source[&#39;max_cases&#39;] &gt;= 1000) alt.Chart(source).mark_circle(size=100).encode( alt.X(&#39;cum_cases:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), color=&#39;pais&#39;, tooltip=[&#39;pais:N&#39;, &#39;cum_deaths:Q&#39;, &#39;cum_cases:Q&#39;] ).properties( width=700, height=400 ).interactive() . . Relacion de casos detectados y desesos por pais . #collapse-hide source = source.where(source[&#39;max_cases&#39;] &gt;= 1000) alt.Chart(source).mark_circle(size=100).encode( alt.X(&#39;cum_cases:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), color=&#39;pais&#39;, tooltip=[&#39;pais:N&#39;, &#39;cum_deaths:Q&#39;, &#39;cum_cases:Q&#39;] ).properties( width=700, height=400 ).interactive() . . Argentina . Curva de casos acumulados por d&#237;a . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_cases:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;pais:N&#39;) ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [13]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:Q&#39;) alt.layer( base, vline,# base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_cases:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;days:Q&#39;), alt.Y(&#39;cum_deaths:Q&#39;), alt.Color(&#39;pais:N&#39;) ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [13]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:Q&#39;) alt.layer( base, vline, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;days:Q&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cum_deaths:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . . Casos detectados por d&#237;a . #collapse-hide source = df.where(df[&#39;pais&#39;] == &#39;Argentina&#39;) label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;dateRep:T&#39;), alt.Y(&#39;cases:Q&#39;), alt.Color(&#39;pais:N&#39;), tooltip=[&#39;pais:N&#39;, &#39;dateRep:T&#39;, &#39;cum_cases:Q&#39;] ) overlay = pd.DataFrame({&#39;cuarentena&#39;: [&#39;2020-03-17&#39;]}) vline = alt.Chart(overlay).mark_rule(color=&#39;red&#39;, strokeWidth=1).encode(x=&#39;cuarentena:T&#39;) alt.layer( base, vline, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;dateRep:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;cases:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;cases:Q&#39; ).transform_filter(label), data=source ).properties( width=700, height=400 ) # La línea roja marca el inicio de la cuarentena . .",
            "url": "/fastpages/2020/03/31/covid19.html",
            "relUrl": "/2020/03/31/covid19.html",
            "date": " • Mar 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}